package com.ftf.validator;

import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

import com.ftf.model.BusinessInformation;

@Component
public class BusinessSignUpValidator implements Validator {

	public boolean supports(Class<?> clazz) {
		return BusinessInformation.class.isAssignableFrom(clazz);
	}

	public void validate(Object target, Errors errors) {
		BusinessInformation businessInformation = (BusinessInformation) target;
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "businessName",
		"error.businessName.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "ownerFirstName",
		"error.firstName.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "ownerLastName",
		"error.lastName.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "phoneNumber",
		"error.phoneNumber.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "location.address",
		"error.address.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "location.cityName",
		"error.city.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "location.stateName",
		"error.state.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "location.zipCode",
		"error.zipCode.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "EmailId",
		"error.email.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password",
		"error.password.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"billingAddress.businessName", "error.businessName.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"billingAddress.firstName", "error.billingFirstName.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"billingAddress.LastName", "error.billingLastName.empty");
		ValidationUtils
		.rejectIfEmptyOrWhitespace(errors,
				"billingAddress.location.address",
		"error.billingAddress.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"billingAddress.location.cityName",
		"error.billingCityName.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"billingAddress.location.stateName",
		"error.billingStateName.empty");
		ValidationUtils
		.rejectIfEmptyOrWhitespace(errors,
				"billingAddress.location.zipCode",
		"error.billingZipCode.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"billingAddress.emailId", "error.billingEmailId.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"eventInformation.eventName", "error.eventName.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"eventInformation.eventOwnerFirstName",
		"error.eventOwnerFirstName.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"eventInformation.eventOwnerLastName",
		"error.eventOwnerLastName.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"eventInformation.phoneNumber", "error.eventPhoneNo.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"eventInformation.location.address", "error.address.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"eventInformation.location.cityName", "error.city.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"eventInformation.location.stateName", "error.state.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"eventInformation.location.zipCode", "error.zipCode.empty");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors,
				"eventInformation.emailId", "error.eventEmailId.empty");
		if (businessInformation.getLocation().getCountry().getCountryId() == 0) {
			errors.rejectValue("location.country.countryId",
			"error.country.select");
		}
		if (businessInformation.getBillingAddress().getLocation().getCountry()
				.getCountryId() == 0) {
			errors.rejectValue("billingAddress.location.country.countryId",
			"error.billingCountry.select");
		}
		if (businessInformation.getEventInformation().getLocation()
				.getCountry().getCountryId() == 0) {
			errors.rejectValue("eventInformation.location.country.countryId",
			"error.eventCountry.select");
		}
	}

}
