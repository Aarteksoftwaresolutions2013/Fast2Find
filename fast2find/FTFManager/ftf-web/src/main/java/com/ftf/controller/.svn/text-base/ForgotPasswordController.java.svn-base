package com.ftf.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import net.tanesha.recaptcha.ReCaptcha;
import net.tanesha.recaptcha.ReCaptchaResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.ftf.model.CustomerInformation;
import com.ftf.model.VisitorUser;
import com.ftf.service.ForgotService;
import com.ftf.validator.SecurityValidator;

@Controller
public class ForgotPasswordController {
	@Autowired
	private ReCaptcha reCaptchaService = null;

	@Autowired
	private ForgotService forgotService;

	@Autowired
	private SecurityValidator securityValidator;

	/**
	 * Method for recaptch. Method for forgot password.
	 */
	@RequestMapping("/security")
	public String showSecurity(Map<String, Object> map, Model model) {
		map.put("VisitorUser", new VisitorUser());
		map.put("CustomerInformation", new CustomerInformation());
		return "security";
	}

	@RequestMapping(value = "/recaptcha", method = RequestMethod.POST)
	public String verify(
			@ModelAttribute("VisitorUser") VisitorUser visitorUser,
			@ModelAttribute("CustomerInformation") CustomerInformation userRegistration,
			BindingResult result, ModelMap model, Map<String, Object> map,
			HttpServletRequest request) {
		String challenge = request.getParameter("recaptcha_challenge_field");
		String response = request.getParameter("recaptcha_response_field");
		String remoteAddr = request.getRemoteAddr();
		@SuppressWarnings("rawtypes")
		List password = new ArrayList();
		String pass = null;
		ReCaptchaResponse reCaptchaResponse = reCaptchaService.checkAnswer(
				remoteAddr, challenge, response);
		if (reCaptchaResponse.isValid()) {
			securityValidator.validate(userRegistration, result);
			if (result.hasErrors()) {
				return "security";
			} else {
				password = forgotService.getPassword(userRegistration
						.getEmail());
				if (!password.isEmpty()) {
					pass = (String) password.get(0);
				}
				forgotService.sendMail(pass, userRegistration.getEmail());
				return "signIn";
			}
		} else {
			model.addAttribute("message", "Try again and prove it.");
			return "security";
		}
	}

}
